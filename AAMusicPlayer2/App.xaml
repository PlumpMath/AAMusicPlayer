<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" mc:Ignorable="d" x:Class="AAMusicPlayer2.App"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
			   <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
  <Setter Property="Height" Value="1"/>
  <Setter Property="Margin" Value="0,4,0,4"/>
  <Setter Property="Template">
    <Setter.Value>
      <ControlTemplate TargetType="{x:Type Separator}">
        <Border BorderBrush="#888888" BorderThickness="1"/>
      </ControlTemplate>
    </Setter.Value>
  </Setter>
</Style>

<!-- TopLevelHeader -->

<ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
  <Border Name="Border" >
    <Grid>
      <ContentPresenter 
        Margin="6,3,6,3" 
        ContentSource="Header"
        RecognizesAccessKey="True" />
      <Popup 
        Name="Popup"
        Placement="Bottom"
        IsOpen="{TemplateBinding IsSubmenuOpen}"
        AllowsTransparency="True" 
        Focusable="False"
        PopupAnimation="Fade">
        <Border 
          Name="SubmenuBorder"
          SnapsToDevicePixels="True"
          Background="#FFFFFF"
          BorderBrush="#888888"
          BorderThickness="1" >
          <StackPanel  
            IsItemsHost="True" 
            KeyboardNavigation.DirectionalNavigation="Cycle" />
        </Border>
      </Popup>
    </Grid>
  </Border>
  <ControlTemplate.Triggers>
    <Trigger Property="IsSuspendingPopupAnimation" Value="true">
      <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
    </Trigger>
    <Trigger Property="IsHighlighted" Value="true">
      <Setter TargetName="Border" Property="Background" Value="#C0C0C0"/>
      <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
    </Trigger>
    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
      <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
      <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
    </Trigger>
    <Trigger Property="IsEnabled" Value="False">
      <Setter Property="Foreground" Value="#888888"/>
    </Trigger>
  </ControlTemplate.Triggers>
</ControlTemplate>

<!-- TopLevelItem -->

<ControlTemplate 
  x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
  TargetType="{x:Type MenuItem}">
  <Border Name="Border" >
    <Grid>
      <ContentPresenter 
        Margin="6,3,6,3" 
        ContentSource="Header"
        RecognizesAccessKey="True" />
    </Grid>
  </Border>
  <ControlTemplate.Triggers>
    <Trigger Property="IsHighlighted" Value="true">
      <Setter TargetName="Border" Property="Background" Value="#C0C0C0"/>
      <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
    </Trigger>
    <Trigger Property="IsEnabled" Value="False">
      <Setter Property="Foreground" Value="#888888"/>
    </Trigger>
  </ControlTemplate.Triggers>
</ControlTemplate>

<!-- SubmenuItem -->

<ControlTemplate 
  x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
  TargetType="{x:Type MenuItem}">
  <Border Name="Border" >
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
        <ColumnDefinition Width="13"/>
      </Grid.ColumnDefinitions>
      <ContentPresenter 
        Name="Icon"
        Margin="6,0,6,0"
        VerticalAlignment="Center"
        ContentSource="Icon"/>
      <Border 
        Name="Check"  
        Width="13" Height="13" 
        Visibility="Collapsed"
        Margin="6,0,6,0" 
        Background="Pink"
        BorderThickness="1"
        BorderBrush="#404040">
        <Path 
          Name="CheckMark"
          Width="7" Height="7" 
          Visibility="Hidden" 
          SnapsToDevicePixels="False" 
          Stroke="#404040"
          StrokeThickness="2"
          Data="M 0 0 L 7 7 M 0 7 L 7 0" />
      </Border>
      <ContentPresenter 
        Name="HeaderHost"
        Grid.Column="1"
        ContentSource="Header"
        RecognizesAccessKey="True"/>
      <TextBlock x:Name="InputGestureText"
        Grid.Column="2"
        Text="{TemplateBinding InputGestureText}"
        Margin="5,2,0,2"
        DockPanel.Dock="Right" />
    </Grid>
  </Border>
  <ControlTemplate.Triggers>
    <Trigger Property="Icon" Value="{x:Null}">
      <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
    </Trigger>
    <Trigger Property="IsChecked" Value="true">
      <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
    </Trigger>
    <Trigger Property="IsCheckable" Value="true">
      <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
      <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
    </Trigger>
    <Trigger Property="IsHighlighted" Value="true">
      <Setter TargetName="Border" Property="Background" Value="#DDDDDD"/>
    </Trigger>
    <Trigger Property="IsEnabled" Value="false">
      <Setter Property="Foreground" Value="#888888"/>
    </Trigger>
  </ControlTemplate.Triggers>
</ControlTemplate>

<!-- SubmenuHeader -->

<ControlTemplate 
  x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
  TargetType="{x:Type MenuItem}">
  <Border Name="Border" >
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
        <ColumnDefinition Width="13"/>
      </Grid.ColumnDefinitions>
      <ContentPresenter 
        Name="Icon"
        Margin="6,0,6,0"
        VerticalAlignment="Center"
        ContentSource="Icon"/>
      <ContentPresenter 
        Name="HeaderHost"
        Grid.Column="1"
        ContentSource="Header"
        RecognizesAccessKey="True"/>
      <TextBlock x:Name="InputGestureText"
        Grid.Column="2"
        Text="{TemplateBinding InputGestureText}"
        Margin="5,2,2,2"
        DockPanel.Dock="Right"/>
      <Path 
        Grid.Column="3"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="M 0 0 L 0 7 L 4 3.5 Z" 
        Fill="#404040" />
      <Popup 
        Name="Popup"
        Placement="Right"
        HorizontalOffset="-4" 
        IsOpen="{TemplateBinding IsSubmenuOpen}"
        AllowsTransparency="True" 
        Focusable="False"
        PopupAnimation="Fade">
        <Border 
          Name="SubmenuBorder"
          SnapsToDevicePixels="True"
          Background="Pink"
          BorderBrush="#888888"
          BorderThickness="1" >
          <StackPanel  
            IsItemsHost="True" 
            KeyboardNavigation.DirectionalNavigation="Cycle" />
        </Border>
      </Popup>
    </Grid>
  </Border>
  <ControlTemplate.Triggers>
    <Trigger Property="Icon" Value="{x:Null}">
      <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
    </Trigger>
    <Trigger Property="IsHighlighted" Value="true">
      <Setter TargetName="Border" Property="Background" Value="#DDDDDD"/>
    </Trigger>
    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
      <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
      <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
    </Trigger>
    <Trigger Property="IsEnabled" Value="false">
      <Setter Property="Foreground" Value="#888888"/>
    </Trigger>
  </ControlTemplate.Triggers>
</ControlTemplate>

<!-- MenuItem Style -->

<Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
  <Setter Property="OverridesDefaultStyle" Value="True"/>
  <Style.Triggers>
    <Trigger Property="Role" Value="TopLevelHeader">
      <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
      <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    </Trigger>
    <Trigger Property="Role" Value="TopLevelItem">
      <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
    </Trigger>
    <Trigger Property="Role" Value="SubmenuHeader">
      <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
    </Trigger>
    <Trigger Property="Role" Value="SubmenuItem">
      <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
    </Trigger>
  </Style.Triggers>
</Style>
        	<Style x:Key="LabelStyle1" TargetType="{x:Type Label}">
        		<Setter Property="Foreground" Value="#FFD6F339"/>
        		<Setter Property="Background" Value="Transparent"/>
        		<Setter Property="Padding" Value="5"/>
        		<Setter Property="HorizontalContentAlignment" Value="Left"/>
        		<Setter Property="VerticalContentAlignment" Value="Top"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type Label}">
        					<Border SnapsToDevicePixels="true" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
        						<ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        		<Setter Property="FontSize" Value="29.333"/>
        		<Setter Property="FontFamily" Value="Garamond"/>
        	</Style>
        	<Style x:Key="BorderStyle1" TargetType="{x:Type Border}">
        		<Setter Property="Background" Value="White"/>
        		<Setter Property="CornerRadius" Value="8"/>
        		<Setter Property="BorderThickness" Value="2"/>
        		<Setter Property="Width" Value="235"/>
        		<Setter Property="Height" Value="30"/>
        	</Style>
        	<SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        	<SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        	<SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        	<Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}">
        		<Setter Property="Background" Value="Transparent"/>
        		<Setter Property="BorderBrush" Value="#00ABADB3"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="0"/>
        		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        		<Setter Property="HorizontalContentAlignment" Value="Left"/>
        		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        		<Setter Property="AllowDrop" Value="true"/>
        		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type TextBox}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
        						<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="Transparent" Foreground="Black" VerticalAlignment="Center" FontSize="16" FontFamily="Garamond" Margin="2,0"/>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Opacity" TargetName="border" Value="0.56"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsKeyboardFocused" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        		<Setter Property="FontFamily" Value="Garamond"/>
        		<Setter Property="FontSize" Value="18.667"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Margin" Value="5,0"/>
        		<Setter Property="Height" Value="30"/>
        		<Style.Triggers>
        			<MultiTrigger>
        				<MultiTrigger.Conditions>
        					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
        					<Condition Property="IsSelectionActive" Value="false"/>
        				</MultiTrigger.Conditions>
        				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        			</MultiTrigger>
        		</Style.Triggers>
        	</Style>
			<Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
				<Setter Property="Background" Value="Pink"/>
			</Style>
        	<Style x:Key="ButtonStyle2" TargetType="{x:Type Button}">
        		
        		<Setter Property="FontFamily" Value="Buxton Sketch"/>
        		<Setter Property="Template" Value="{DynamicResource ButtonBaseControlTemplate1}"/>
        		<Setter Property="MaxHeight" Value="40"/>
        		<Setter Property="MinHeight" Value="30"/>
        		<Setter Property="MinWidth" Value="30"/>
        		<Setter Property="MaxWidth" Value="50"/>
        		<Setter Property="Background" Value="#FFFC719A"/>
        		<Setter Property="Foreground" Value="White"/>
        		<Setter Property="FontSize" Value="16"/>
        		<Setter Property="BorderBrush" Value="#FFD6F339"/>
        		<Setter Property="BorderThickness" Value="2"/>
        	</Style>
			
        	<Style x:Key="ButtonBorderStyle" TargetType="{x:Type Border}">
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="Background" Value="#FFD91C17"/>
        		<Setter Property="CornerRadius" Value="12"/>
        		<Setter Property="Effect">
        			<Setter.Value>
        				<DropShadowEffect ShadowDepth="2"/>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	<ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
        		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="12">
        			<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        		</Border>
        		<ControlTemplate.Triggers>
        			<Trigger Property="Button.IsDefaulted" Value="True">
        				<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        			</Trigger>
        			<Trigger Property="IsMouseOver" Value="True">
        				<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
        				<Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
        			</Trigger>
        			<Trigger Property="IsPressed" Value="True">
        				<Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
        				<Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
        			</Trigger>
        			<Trigger Property="ToggleButton.IsChecked" Value="True">
        				<Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
        				<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
        			</Trigger>
        			<Trigger Property="IsEnabled" Value="False">
        				<Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
        				<Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
        				<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
        			</Trigger>
        		</ControlTemplate.Triggers>
        	</ControlTemplate>
        	<Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
        		<Setter Property="Background" Value="#FFE8F3AD"/>
        		<Setter Property="GridLinesVisibility" Value="Horizontal"/>
        		<Setter Property="HorizontalGridLinesBrush" Value="#FFF18E8E"/>
        		<Setter Property="FontFamily" Value="Garamond"/>
        		<Setter Property="FontSize" Value="13.333"/>
        	</Style>
        	<ControlTemplate x:Key="MuteButtonControl" TargetType="{x:Type Button}">
        		<ControlTemplate.Resources>
        			<Storyboard x:Key="OnClick1"/>
        		</ControlTemplate.Resources>
        		<Grid>
        			<i:Interaction.Triggers>
        				<i:EventTrigger EventName="MouseLeftButtonDown">
        					<i:Interaction.Behaviors>
        						<ei:ConditionBehavior>
        							<ei:ConditionalExpression>
        								<ei:ComparisonCondition LeftOperand="muted"/>
        							</ei:ConditionalExpression>
        						</ei:ConditionBehavior>
        					</i:Interaction.Behaviors>
        					<ei:GoToStateAction StateName="Off"/>
        				</i:EventTrigger>
        			</i:Interaction.Triggers>
        			<VisualStateManager.VisualStateGroups>
        				<VisualStateGroup x:Name="OnOff">
        					<VisualState x:Name="On"/>
        					<VisualState x:Name="Off">
        						<Storyboard>
        							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
        								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        							</ObjectAnimationUsingKeyFrames>
        							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="path">
        								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        							</ObjectAnimationUsingKeyFrames>
        						</Storyboard>
        					</VisualState>
        				</VisualStateGroup>
        			</VisualStateManager.VisualStateGroups>
        			<Path Data="M14.499515,0.097670229 L14.582845,28.015347 4.8185009,19.489053 4.8735794,19.431499 0,19.431499 0,8.6814987 5.0195964,8.6814987 z" Fill="Black" HorizontalAlignment="Left" Height="27.917" Margin="7.75,14.167,0,0" Stretch="Fill" VerticalAlignment="Top" Width="14.583" d:IsLocked="True"/>
        			<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="27.833" Margin="37.669,14.167,0,0" Stretch="Fill" VerticalAlignment="Top" Width="6.669" d:IsLocked="True"/>
        			<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="18.583" Margin="32.25,20.167,0,0" Stretch="Fill" VerticalAlignment="Top" Width="5.419" d:IsLocked="True"/>
        			<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="12.5" Margin="27.25,23,0,0" Stretch="Fill" VerticalAlignment="Top" Width="5" RenderTransformOrigin="-0.375,0.52" d:IsLocked="True"/>
        			<Ellipse x:Name="ellipse" Fill="#00000000" HorizontalAlignment="Left" Height="51.75" Margin="-1.083,2.75,0,0" VerticalAlignment="Top" Width="53.25" Stroke="Red" StrokeThickness="4" Visibility="Hidden"/>
        			<Path x:Name="path" Data="M2,2 L36.416667,37.75" Fill="#00000000" HorizontalAlignment="Left" Height="39.75" Margin="5.75,8,0,0" Stroke="Red" StrokeThickness="4" VerticalAlignment="Top" Width="38.417" Visibility="Hidden"/>
        		</Grid>
        	</ControlTemplate>
        	<Style x:Key="FocusVisual">
        		<Setter Property="Control.Template">
        			<Setter.Value>
        				<ControlTemplate>
        					<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	<SolidColorBrush x:Key="Button.Static.Background" Color="#FFD6F339"/>
        	<SolidColorBrush x:Key="Button.Static.Border" Color="#FF0E8181"/>
        	<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        	<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        	<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        	<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        	<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        	<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        	<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        	<Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ToggleButton}">
        					<Grid x:Name="grid" Margin="-1,-1,0.182,1.083" Width="Auto" Background="{x:Null}">
        						<VisualStateManager.VisualStateGroups>
        							<VisualStateGroup x:Name="CheckStates1">
        								<VisualState x:Name="Checked1">
        									<Storyboard>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="path">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualState>
        								<VisualState x:Name="Unchecked1">
        									<Storyboard>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="path">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualState>
        								<VisualState x:Name="Indeterminate1"/>
        							</VisualStateGroup>
        							<VisualStateGroup x:Name="CommonStates1">
        								<VisualState x:Name="Normal1"/>
        								<VisualState x:Name="MouseOver1"/>
        								<VisualState x:Name="Pressed1"/>
        								<VisualState x:Name="Disabled1"/>
        							</VisualStateGroup>
        							<VisualStateGroup x:Name="CheckStates">
        								<VisualState x:Name="Checked">
        									<Storyboard>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ellipse">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="path">
        											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        										</ObjectAnimationUsingKeyFrames>
        									</Storyboard>
        								</VisualState>
        								<VisualState x:Name="Unchecked"/>
        								<VisualState x:Name="Indeterminate"/>
        							</VisualStateGroup>
        						</VisualStateManager.VisualStateGroups>
        						<Path Data="M14.499515,0.097670229 L14.582845,28.015347 4.8185009,19.489053 4.8735794,19.431499 0,19.431499 0,8.6814987 5.0195964,8.6814987 z" Fill="Black" HorizontalAlignment="Left" Height="25.25" Margin="15.5,20.084,0,0" Stretch="Fill" VerticalAlignment="Top" Width="13.19"/>
        						<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="25.174" Margin="42.561,20.084,0,0" Stretch="Fill" VerticalAlignment="Top" Width="6.032"/>
        						<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="16.808" Margin="37.66,25.511,0,0" Stretch="Fill" VerticalAlignment="Top" Width="4.901"/>
        						<Path Data="M0,0 L2.167,0 C6.4596679,9.2776667 6.5461798,18.555333 2.167,27.833 L0,27.833 C3.593638,18.555333 3.5226448,9.2776667 0,0 z" Fill="Black" HorizontalAlignment="Left" Height="11.306" Margin="33.137,28.073,0,0" Stretch="Fill" VerticalAlignment="Top" Width="4.523" RenderTransformOrigin="-0.375,0.52"/>
        						<Ellipse x:Name="ellipse" Fill="#00000000" HorizontalAlignment="Left" Height="49.583" VerticalAlignment="Top" Width="50.308" Stroke="Red" StrokeThickness="4" Visibility="Hidden" Margin="7,7,0,0"/>
        						<Path x:Name="path" Data="M2,2 L36.416667,37.75" Fill="#00000000" HorizontalAlignment="Left" Height="38.086" Margin="13.547,12.03,0,0" Stroke="Red" StrokeThickness="4" VerticalAlignment="Top" Width="36.808" Visibility="Hidden" Stretch="Fill"/>
        						<Path Data="M0,0 L62.985,0 L62.985,59.917 L0,59.917 z" Fill="#00000000" HorizontalAlignment="Left" Height="59.917" Stretch="Fill" VerticalAlignment="Top" Width="62.985"/>
        					</Grid>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true"/>
        						<Trigger Property="IsMouseOver" Value="true"/>
        						<Trigger Property="IsPressed" Value="true"/>
        						<Trigger Property="IsEnabled" Value="false"/>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	<Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
        						<Grid Height="41" Width="41">
        							<Path Data="M0,0 L41,41 0,41 z" Fill="#FF0E8181" Height="Auto" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Stroke="Black" StrokeThickness="0" Width="Auto" Margin="21.889,13.03,-0.048,12.362" >
        								<Path.RenderTransform>
        									<TransformGroup>
        										<ScaleTransform ScaleY="1.096" ScaleX="0.912"/>
        										<SkewTransform AngleX="-11.661"/>
        										<RotateTransform Angle="39.17"/>
        										<TranslateTransform/>
        									</TransformGroup>
        								</Path.RenderTransform>
        							</Path>
        							<Rectangle Fill="#FF0E8181" HorizontalAlignment="Left" Height="22.334" Margin="9.741,9.667,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="7.164" RenderTransformOrigin="0.5,0.5"/>
        						</Grid>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsPressed" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
			<Style x:Key="NextButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
        						<Grid Height="41" Width="41" RenderTransformOrigin="0.439,0.508">
        							<Path Data="M0,0 L41,41 0,41 z" Fill="#FF0E8181" Height="Auto" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Stroke="Black" StrokeThickness="0" Width="Auto" Margin="26.389,13.197,-4.548,12.195" >
        								<Path.RenderTransform>
        									<TransformGroup>
        										<ScaleTransform ScaleY="1.096" ScaleX="0.912"/>
        										<SkewTransform AngleX="-11.661"/>
        										<RotateTransform Angle="219.046"/>
        										<TranslateTransform X="-27.937" Y="-0.953"/>
        									</TransformGroup>
        								</Path.RenderTransform>
        							</Path>
        							<Rectangle Fill="#FF0E8181" HorizontalAlignment="Left" Height="22.334" Margin="14.241,9.834,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="7.164" RenderTransformOrigin="0.5,0.5">
        								<Rectangle.RenderTransform>
        									<TransformGroup>
        										<ScaleTransform/>
        										<SkewTransform/>
        										<RotateTransform Angle="179.876"/>
        										<TranslateTransform X="8.355" Y="-0.991"/>
        									</TransformGroup>
        								</Rectangle.RenderTransform>
        							</Rectangle>
        						</Grid>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsPressed" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
        	<Style x:Key="ArrowButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Grid>
        						<Path Fill="Black" HorizontalAlignment="Left" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Data="M13.906669,4.3957624 L20.74227,11.231363 6.8356016,25.138033 0,18.302431 z M9.7469663,0 L26.079967,0 26.079967,16.333 z" Height="25.138" Margin="1.92,14.667,0,0" RenderTransformOrigin="0.705028640669428,0.333962565910457" Stretch="Fill" Width="26.08">
        							<Path.RenderTransform>
        								<TransformGroup>
        									<ScaleTransform/>
        									<SkewTransform/>
        									<RotateTransform Angle="45"/>
        									<TranslateTransform X="-0.29999999999999716" Y="0.26699999999999946"/>
        								</TransformGroup>
        							</Path.RenderTransform>
        						</Path>
        					</Grid>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true"/>
        						<Trigger Property="IsMouseOver" Value="true"/>
        						<Trigger Property="IsPressed" Value="true"/>
        						<Trigger Property="IsEnabled" Value="false"/>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
			<Style x:Key="StopButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
        						<Grid Height="41" Width="41">
        							<Rectangle Fill="#FF0E8181" HorizontalAlignment="Left" Height="21.835" Margin="9.47,10,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="20.787" RenderTransformOrigin="0.5,0.5"/>
        						</Grid>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsPressed" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	<Style x:Key="PlayButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
        						<Grid Height="41" Width="41">
        							<Path Fill="#FF0E8181" HorizontalAlignment="Left" Height="22.334" Margin="4.408,9.667,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="21.259" RenderTransformOrigin="0.5,0.5" Data="M0,0 L21.259,0 21.259,22.334 z" Stretch="Fill">
        								<Path.RenderTransform>
        									<TransformGroup>
        										<ScaleTransform/>
        										<SkewTransform/>
        										<RotateTransform Angle="42.323"/>
        										<TranslateTransform Y="1.7763568394002505E-15"/>
        									</TransformGroup>
        								</Path.RenderTransform>
        							</Path>
        						</Grid>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsPressed" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        <Style x:Key="PauseButtonStyle" TargetType="{x:Type ButtonBase}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        		<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        		<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="HorizontalContentAlignment" Value="Center"/>
        		<Setter Property="VerticalContentAlignment" Value="Center"/>
        		<Setter Property="Padding" Value="1"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ButtonBase}">
        					<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="30">
        						<Grid Height="41" Width="41">
        							<Rectangle Fill="#FF0E8181" HorizontalAlignment="Left" Height="27.333" Margin="11.667,7,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="6.935"/>
        							<Rectangle Fill="#FF0E8181" HorizontalAlignment="Left" Height="27.333" Margin="22.565,7,0,0" Stroke="Black" StrokeThickness="0" VerticalAlignment="Top" Width="6.935"/>
        						</Grid>
        					</Border>
        					<ControlTemplate.Triggers>
        						<Trigger Property="Button.IsDefaulted" Value="true">
        							<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        						</Trigger>
        						<Trigger Property="IsMouseOver" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        						</Trigger>
        						<Trigger Property="IsPressed" Value="true">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        							<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	<Style x:Key="BackButton" BasedOn="{StaticResource BaseButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
        	<Style x:Key="StopButton" BasedOn="{StaticResource StopButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
			<Style x:Key="PlayButton" BasedOn="{StaticResource PlayButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
			<Style x:Key="PauseButton" BasedOn="{StaticResource PauseButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
			<Style x:Key="NextButton" BasedOn="{StaticResource NextButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
			<Style x:Key="ArrowButton" BasedOn="{StaticResource ArrowButtonStyle}" TargetType="{x:Type RepeatButton}">
        		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        	</Style>
			
			<Style x:Key="XButtonStyle" TargetType="{x:Type Button}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
				<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
				<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Padding" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="10">
								<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsDefaulted" Value="true">
									<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
